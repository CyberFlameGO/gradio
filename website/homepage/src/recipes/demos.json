[{"name": "Hello World", "dir": "hello_world", "code": "import gradio as gr\n\ndef greet(name):\n    return \"Hello \" + name + \"!\"\n\ndemo = gr.Interface(fn=greet, inputs=\"text\", outputs=\"text\")\nif __name__ == \"__main__\":\n    demo.launch()\n"}, {"name": "Sepia Filter", "dir": "sepia_filter", "code": "import numpy as np\nimport gradio as gr\n\ndef sepia(input_img):\n    sepia_filter = np.array([\n        [0.393, 0.769, 0.189], \n        [0.349, 0.686, 0.168], \n        [0.272, 0.534, 0.131]\n    ])\n    sepia_img = input_img.dot(sepia_filter.T)\n    sepia_img /= sepia_img.max()\n    return sepia_img\n\ndemo = gr.Interface(sepia, gr.Image(shape=(200, 200)), \"image\")\nif __name__ == \"__main__\":\n    demo.launch()\n"}, {"name": "Sales Projections", "dir": "sales_projections", "code": "import matplotlib\nmatplotlib.use('Agg')\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport gradio as gr\n\n\ndef sales_projections(employee_data):\n    sales_data = employee_data.iloc[:, 1:4].astype(\"int\").to_numpy()\n    regression_values = np.apply_along_axis(\n        lambda row: np.array(np.poly1d(np.polyfit([0, 1, 2], row, 2))), 0, sales_data\n    )\n    projected_months = np.repeat(\n        np.expand_dims(np.arange(3, 12), 0), len(sales_data), axis=0\n    )\n    projected_values = np.array(\n        [\n            month * month * regression[0] + month * regression[1] + regression[2]\n            for month, regression in zip(projected_months, regression_values)\n        ]\n    )\n    plt.plot(projected_values.T)\n    plt.legend(employee_data[\"Name\"])\n    return employee_data, plt.gcf(), regression_values\n\n\ndemo = gr.Interface(\n    sales_projections,\n    gr.Dataframe(\n        headers=[\"Name\", \"Jan Sales\", \"Feb Sales\", \"Mar Sales\"],\n        value=[[\"Jon\", 12, 14, 18], [\"Alice\", 14, 17, 2], [\"Sana\", 8, 9.5, 12]],\n    ),\n    [\"dataframe\", \"plot\", \"numpy\"],\n    description=\"Enter sales figures for employees to predict sales trajectory over year.\",\n)\nif __name__ == \"__main__\":\n    demo.launch()\n"}, {"name": "Calculator", "dir": "calculator", "code": "import gradio as gr\n\ndef calculator(num1, operation, num2):\n    if operation == \"add\":\n        return num1 + num2\n    elif operation == \"subtract\":\n        return num1 - num2\n    elif operation == \"multiply\":\n        return num1 * num2\n    elif operation == \"divide\":\n        return num1 / num2\n\ndemo = gr.Interface(\n    calculator,\n    [\n        \"number\", \n        gr.Radio([\"add\", \"subtract\", \"multiply\", \"divide\"]),\n        \"number\"\n    ],\n    \"number\",\n    examples=[\n        [5, \"add\", 3],\n        [4, \"divide\", 2],\n        [-4, \"multiply\", 2.5],\n        [0, \"subtract\", 1.2],\n    ],\n    title=\"Toy Calculator\",\n    description=\"Here's a sample toy calculator. Enjoy!\",\n)\nif __name__ == \"__main__\":\n    demo.launch()\n"}, {"name": "Calculator Live", "dir": "calculator_live", "code": "import gradio as gr\n\ndef calculator(num1, operation, num2):\n    if operation == \"add\":\n        return num1 + num2\n    elif operation == \"subtract\":\n        return num1 - num2\n    elif operation == \"multiply\":\n        return num1 * num2\n    elif operation == \"divide\":\n        return num1 / num2\n\ndemo = gr.Interface(\n    calculator,\n    [\n        \"number\",\n        gr.Radio([\"add\", \"subtract\", \"multiply\", \"divide\"]),\n        \"number\"\n    ],\n    \"number\",\n    live=True,\n)\nif __name__ == \"__main__\":\n    demo.launch()\n"}, {"name": "Hello World (Blocks)", "dir": "blocks_hello", "code": "import gradio as gr\n\ndef welcome(name):\n    return f\"Welcome to Gradio, {name}!\"\n\nwith gr.Blocks() as demo:\n    gr.Markdown(\n    \"\"\"\n    # Hello World!\n    Start typing below to see the output.\n    \"\"\")\n    inp = gr.Textbox(placeholder=\"What is your name?\")\n    out = gr.Textbox()\n    inp.change(welcome, inp, out)\n\nif __name__ == \"__main__\":\n    demo.launch()"}, {"name": "Image and Text Flipper", "dir": "blocks_flipper", "code": "import numpy as np\nimport gradio as gr\n\ndef flip_text(x):\n    return x[::-1]\n\ndef flip_image(x):\n    return np.fliplr(x)\n\nwith gr.Blocks() as demo:\n    gr.Markdown(\"Flip text or image files using this demo.\")\n    with gr.Tabs():\n        with gr.TabItem(\"Flip Text\"):\n            text_input = gr.Textbox()\n            text_output = gr.Textbox()\n            text_button = gr.Button(\"Flip\")\n        with gr.TabItem(\"Flip Image\"):\n            with gr.Row():\n                image_input = gr.Image()\n                image_output = gr.Image()\n            image_button = gr.Button(\"Flip\")\n    \n    text_button.click(flip_text, inputs=text_input, outputs=text_output)\n    image_button.click(flip_image, inputs=image_input, outputs=image_output)\n    \nif __name__ == \"__main__\":\n    demo.launch()"}, {"name": "GPT", "dir": "blocks_gpt", "code": "import gradio as gr\n\napi = gr.Interface.load(\"huggingface/EleutherAI/gpt-j-6B\")\n\ndef complete_with_gpt(text):\n    # Use the last 50 characters of the text as context\n    return text[:-50] + api(text[-50:])\n\nwith gr.Blocks() as demo:\n    textbox = gr.Textbox(placeholder=\"Type here and press enter...\", lines=4)\n    btn = gr.Button(\"Generate\")\n    \n    btn.click(complete_with_gpt, textbox, textbox)\n    \nif __name__ == \"__main__\":\n    demo.launch()"}, {"name": "Sentiment Analysis", "dir": "blocks_speech_text_sentiment", "code": "from transformers import pipeline\n\nimport gradio as gr\n\nasr = pipeline(\"automatic-speech-recognition\", \"facebook/wav2vec2-base-960h\")\nclassifier = pipeline(\"text-classification\")\n\n\ndef speech_to_text(speech):\n    text = asr(speech)[\"text\"]\n    return text\n\n\ndef text_to_sentiment(text):\n    return classifier(text)[0][\"label\"]\n\n\ndemo = gr.Blocks()\n\nwith demo:\n    audio_file = gr.Audio(type=\"filepath\")\n    text = gr.Textbox()\n    label = gr.Label()\n\n    b1 = gr.Button(\"Recognize Speech\")\n    b2 = gr.Button(\"Classify Sentiment\")\n\n    b1.click(speech_to_text, inputs=audio_file, outputs=text)\n    b2.click(text_to_sentiment, inputs=text, outputs=label)\n\nif __name__ == \"__main__\":\n    demo.launch()\n"}, {"name": "Image Classification with Keras", "dir": "image_classifier", "code": "import os\nimport requests\nimport tensorflow as tf\n\nimport gradio as gr\n\ninception_net = tf.keras.applications.MobileNetV2()  # load the model\n\n# Download human-readable labels for ImageNet.\nresponse = requests.get(\"https://git.io/JJkYN\")\nlabels = response.text.split(\"\\n\")\n\n\ndef classify_image(inp):\n    inp = inp.reshape((-1, 224, 224, 3))\n    inp = tf.keras.applications.mobilenet_v2.preprocess_input(inp)\n    prediction = inception_net.predict(inp).flatten()\n    return {labels[i]: float(prediction[i]) for i in range(1000)}\n\n\nimage = gr.Image(shape=(224, 224))\nlabel = gr.Label(num_top_classes=3)\n\ndemo = gr.Interface(\n    fn=classify_image,\n    inputs=image,\n    outputs=label,\n    examples=[\n        os.path.join(os.path.dirname(__file__), \"images/cheetah1.jpg\"),\n        os.path.join(os.path.dirname(__file__), \"images/lion.jpg\")\n        ]\n    )\n\nif __name__ == \"__main__\":\n    demo.launch()\n\n"}, {"name": "Image Classification with Pytorch", "dir": "image_classifier_2", "code": "import requests\nimport torch\nfrom PIL import Image\nfrom torchvision import transforms\n\nimport gradio as gr\n\nmodel = torch.hub.load(\"pytorch/vision:v0.6.0\", \"resnet18\", pretrained=True).eval()\n\n# Download human-readable labels for ImageNet.\nresponse = requests.get(\"https://git.io/JJkYN\")\nlabels = response.text.split(\"\\n\")\n\n\ndef predict(inp):\n    inp = Image.fromarray(inp.astype(\"uint8\"), \"RGB\")\n    inp = transforms.ToTensor()(inp).unsqueeze(0)\n    with torch.no_grad():\n        prediction = torch.nn.functional.softmax(model(inp)[0], dim=0)\n    return {labels[i]: float(prediction[i]) for i in range(1000)}\n\n\ninputs = gr.Image()\noutputs = gr.Label(num_top_classes=3)\n\ndemo = gr.Interface(fn=predict, inputs=inputs, outputs=outputs)\n\nif __name__ == \"__main__\":\n    demo.launch()\n"}, {"name": "Titanic Survival", "dir": "titanic_survival", "code": "import os\n\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\nimport gradio as gr\n\ncurrent_dir = os.path.dirname(os.path.realpath(__file__))\ndata = pd.read_csv(os.path.join(current_dir, \"files/titanic.csv\"))\n\n\ndef encode_age(df):\n    df.Age = df.Age.fillna(-0.5)\n    bins = (-1, 0, 5, 12, 18, 25, 35, 60, 120)\n    categories = pd.cut(df.Age, bins, labels=False)\n    df.Age = categories\n    return df\n\n\ndef encode_fare(df):\n    df.Fare = df.Fare.fillna(-0.5)\n    bins = (-1, 0, 8, 15, 31, 1000)\n    categories = pd.cut(df.Fare, bins, labels=False)\n    df.Fare = categories\n    return df\n\n\ndef encode_df(df):\n    df = encode_age(df)\n    df = encode_fare(df)\n    sex_mapping = {\"male\": 0, \"female\": 1}\n    df = df.replace({\"Sex\": sex_mapping})\n    embark_mapping = {\"S\": 1, \"C\": 2, \"Q\": 3}\n    df = df.replace({\"Embarked\": embark_mapping})\n    df.Embarked = df.Embarked.fillna(0)\n    df[\"Company\"] = 0\n    df.loc[(df[\"SibSp\"] > 0), \"Company\"] = 1\n    df.loc[(df[\"Parch\"] > 0), \"Company\"] = 2\n    df.loc[(df[\"SibSp\"] > 0) & (df[\"Parch\"] > 0), \"Company\"] = 3\n    df = df[\n        [\n            \"PassengerId\",\n            \"Pclass\",\n            \"Sex\",\n            \"Age\",\n            \"Fare\",\n            \"Embarked\",\n            \"Company\",\n            \"Survived\",\n        ]\n    ]\n    return df\n\n\ntrain = encode_df(data)\n\nX_all = train.drop([\"Survived\", \"PassengerId\"], axis=1)\ny_all = train[\"Survived\"]\n\nnum_test = 0.20\nX_train, X_test, y_train, y_test = train_test_split(\n    X_all, y_all, test_size=num_test, random_state=23\n)\n\nclf = RandomForestClassifier()\nclf.fit(X_train, y_train)\npredictions = clf.predict(X_test)\n\n\ndef predict_survival(passenger_class, is_male, age, company, fare, embark_point):\n    if passenger_class is None or embark_point is None:\n        return None\n    df = pd.DataFrame.from_dict(\n        {\n            \"Pclass\": [passenger_class + 1],\n            \"Sex\": [0 if is_male else 1],\n            \"Age\": [age],\n            \"Company\": [\n                (1 if \"Sibling\" in company else 0) + (2 if \"Child\" in company else 0)\n            ],\n            \"Fare\": [fare],\n            \"Embarked\": [embark_point + 1],\n        }\n    )\n    df = encode_age(df)\n    df = encode_fare(df)\n    pred = clf.predict_proba(df)[0]\n    return {\"Perishes\": float(pred[0]), \"Survives\": float(pred[1])}\n\n\ndemo = gr.Interface(\n    predict_survival,\n    [\n        gr.Dropdown([\"first\", \"second\", \"third\"], type=\"index\"),\n        \"checkbox\",\n        gr.Slider(0, 80, value=25),\n        gr.CheckboxGroup([\"Sibling\", \"Child\"], label=\"Travelling with (select all)\"),\n        gr.Number(value=20),\n        gr.Radio([\"S\", \"C\", \"Q\"], type=\"index\"),\n    ],\n    \"label\",\n    examples=[\n        [\"first\", True, 30, [], 50, \"S\"],\n        [\"second\", False, 40, [\"Sibling\", \"Child\"], 10, \"Q\"],\n        [\"third\", True, 30, [\"Child\"], 20, \"S\"],\n    ],\n    interpretation=\"default\",\n    live=True,\n)\n\nif __name__ == \"__main__\":\n    demo.launch()\n"}, {"name": "Outbreak Forecast", "dir": "outbreak_forecast", "code": "from math import sqrt\n\nimport matplotlib\nmatplotlib.use('Agg')\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport plotly.express as px\nimport pandas as pd\nimport bokeh.plotting as bk\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.embed import json_item\n\nimport gradio as gr\n\n\ndef outbreak(plot_type, r, month, countries, social_distancing):\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\"]\n    m = months.index(month)\n    start_day = 30 * m\n    final_day = 30 * (m + 1)\n    x = np.arange(start_day, final_day + 1)\n    pop_count = {\"USA\": 350, \"Canada\": 40, \"Mexico\": 300, \"UK\": 120}\n    if social_distancing:\n        r = sqrt(r)\n    df = pd.DataFrame({'day': x})\n    for country in countries:\n        df[country] = ( x ** (r) * (pop_count[country] + 1))\n        \n\n    if plot_type == \"Matplotlib\":\n        fig = plt.figure()\n        plt.plot(df['day'], df[countries].to_numpy())\n        plt.title(\"Outbreak in \" + month)\n        plt.ylabel(\"Cases\")\n        plt.xlabel(\"Days since Day 0\")\n        plt.legend(countries)\n        return fig\n    elif plot_type == \"Plotly\":\n        fig = px.line(df, x='day', y=countries)\n        fig.update_layout(title=\"Outbreak in \" + month,\n                   xaxis_title=\"Cases\",\n                   yaxis_title=\"Days Since Day 0\")\n        return fig\n    else:\n        source = ColumnDataSource(df)\n        p = bk.figure(title=\"Outbreak in \" + month, x_axis_label=\"Cases\", y_axis_label=\"Days Since Day 0\")\n        for country in countries:\n            p.line(x='day', y=country, line_width=2, source=source)\n        item_text = json_item(p, \"plotDiv\")\n        return item_text\n\ninputs = [\n        gr.Dropdown([\"Matplotlib\", \"Plotly\", \"Bokeh\"], label=\"Plot Type\"),\n        gr.Slider(1, 4, 3.2, label=\"R\"),\n        gr.Dropdown([\"January\", \"February\", \"March\", \"April\", \"May\"], label=\"Month\"),\n        gr.CheckboxGroup([\"USA\", \"Canada\", \"Mexico\", \"UK\"], label=\"Countries\", \n                         value=[\"USA\", \"Canada\"]),\n        gr.Checkbox(label=\"Social Distancing?\"),\n    ]\noutputs = gr.Plot()\n\ndemo = gr.Interface(fn=outbreak, inputs=inputs, outputs=outputs, examples=[\n        [\"Matplotlib\", 2, \"March\", [\"Mexico\", \"UK\"], True],\n        [\"Plotly\", 3.6, \"February\", [\"Canada\", \"Mexico\", \"UK\"], False],\n        [\"Bokeh\", 1.2, \"May\", [\"UK\"], True]\n    ], cache_examples=True)\n\n\nif __name__ == \"__main__\":\n    demo.launch()\n"}, {"name": "GPT-J", "dir": "gpt_j", "code": "import gradio as gr\n\ntitle = \"GPT-J-6B\"\n\nexamples = [\n    [\"The tower is 324 metres (1,063 ft) tall,\"],\n    [\"The Moon's orbit around Earth has\"],\n    [\"The smooth Borealis basin in the Northern Hemisphere covers 40%\"],\n]\n\ndemo = gr.Interface.load(\n    \"huggingface/EleutherAI/gpt-j-6B\",\n    inputs=gr.Textbox(lines=5, max_lines=6, label=\"Input Text\"),\n    title=title,\n    examples=examples,\n)\n\nif __name__ == \"__main__\":\n    demo.launch()\n"}]